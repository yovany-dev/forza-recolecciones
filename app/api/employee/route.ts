// Code generated by ChatGPT XD

import { authOptions } from '@/lib/authOptions';
import { getServerSession } from 'next-auth';
import { PrismaClient } from '@prisma/client';

export async function GET(req: Request) {
  const session = await getServerSession(authOptions);
  const prisma = new PrismaClient();
  const { searchParams } = new URL(req.url);

  const type = searchParams.get('type');
  const dpi = searchParams.get('dpi');

  // Validar sesión
  if (!session || !session.user) {
    return Response.json({ errorMessage: 'No autorizado.', status: 401 });
  }

  // Validar query params
  if (!type || !dpi) {
    return Response.json({
      errorMessage: "Parámetros 'type' y 'dpi' son requeridos.",
      status: 400,
    });
  }

  // Validar valores permitidos en 'type'
  if (type !== 'driver' && type !== 'copilot') {
    return Response.json({
      errorMessage: "El parámetro 'type' solo puede ser 'driver' o 'copilot'.",
      status: 400,
    });
  }

  try {
    let employee = null;

    if (type === 'driver') {
      employee = await prisma.drivers.findUnique({
        where: { dpi },
      });
      if (!employee) {
        return Response.json({
          errorMessage: 'Piloto no encontrado.',
          status: 404,
        });
      }
    }

    if (type === 'copilot') {
      employee = await prisma.copilot.findUnique({
        where: { dpi },
      });
      if (!employee) {
        return Response.json({
          errorMessage: 'Auxiliar no encontrado.',
          status: 404,
        });
      }
    }

    // Retornar el empleado encontrado
    return Response.json({ employee, status: 200 });
  } catch (error) {
    return Response.json({
      errorMessage: 'Error al consultar empleado.',
      errorServer: error,
      status: 500,
    });
  }
}
